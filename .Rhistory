library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(predictors)
adData
head(adData)
adData = data.frame(diagnosis,predictors)
adData
head(adData)
predictors
str(predictors)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
?predictors
hist(training$Superplasticizer)
table(training$Superplasticizer = 0)
table(training$Superplasticizer ==0)
ss <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(ss, method='pca', thresh=0.9,
outcome=training$diagnosis)
ss <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(ss, method='pca', thresh=0.8, outcome=training$diagnosis)
str(ss)
ss <- training[,grep('IL', x = names(training) )]
str(ss)
str(training)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ss <- training[,grep('^IL', x = names(training) )]
str(ss)
preProc <- preProcess(ss, method='pca', thresh=0.8, outcome=training$diagnosis)
preProc$rotation # 9
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
install.packages(rattle)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
str(segmentationOriginal)
?segmentationOriginal
inTrain = createDataPartition(y=segmentationOriginal$Class,
p=0.7,list = F)
training = segmentationOriginal[inTrain, ]
testing = segmentationOriginal[-inTrain, ]
dim(training); dim(testing)
seed(125)
seed
set.seed(125)
treefit <- train(Class ~ ., methods = "rpart", data = training)
treefit <- train(Class ~ ., methods = "rpart", data = training)
install.packages(e1071)
install.packages("e1071")
treefit <- train(Class ~ ., methods = "rpart", data = training)
install.packages("rattle")
treefit <- train(Class ~ ., methods = "rpart", data = training)
View(segmentationOriginal)
inTrain = data$Case == "Train"
inTrain <- data$Case == "Train"
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- segmentationOriginal$Case == "Train"
training = segmentationOriginal[inTrain, ]
testing = segmentationOriginal[-inTrain, ]
dim(training); dim(testing)
set.seed(125)
treefit <- train(Class ~ ., methods = "rpart", data = training)
print(treefit$finalModel)
library(rattle)
fancyRpartPlot(treefit$finalModel)
library(rattle)
plot(treefit$finalModel, uniform = T, main = "Tree Classification")
text(treefit$finalModel, use.n = T, all = T, cex = .8)
View(training)
set.seed(125)
warnings()
treefit$finalModel
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- segmentationOriginal$Case == "Train"
training = segmentationOriginal[inTrain, ]
testing = segmentationOriginal[-inTrain, ]
dim(training); dim(testing)
set.seed(125)
treefit <- train(Class ~ ., data=training, method="rpart")
treefit$finalModel
plot(treefit$finalModel, uniform = T, main = "Classification Result")
text(treefit$finalModel, use.n = T, all = T, cex = .8)
plot(treefit$finalModel, uniform = T, main = "Classification Result")
text(treefit$finalModel, use.n = T, all = T, cex = .8)
text(treefit$finalModel, use.n = T, all = T, cex = .9)
plot(treefit$finalModel, uniform = T, main = "Classification Result")
text(treefit$finalModel, use.n = T, all = T, cex = .5)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
View(olive)
newdata = as.data.frame(t(colMeans(olive)))
treefit2 <- train(Area ~ ., data=olive, method="rpart")
predict(treefit2, newdata = newdata)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
logitfit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data=train, method="glm", family="binomial")
logitfit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data=trainSA, method="glm", family="binomial")
logitfit
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
train_phat = predict(logitModel, trainSA)
train_phat = predict(logitfit, trainSA)
test_phat = predict(logitfit, testSA)
missClass(trainSA$chd, train_phat)
missClass(testSA$chd, test_phat)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
RFfit <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
library(caret)
RFfit <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
RFfit <- train(y ~ ., data = vowel.train, method = "rf", prox = T)
RFfit$finalModel
order(varImp(RFfit), decreasing=T)
install.packages("randomForest")
install.packages("randomForest")
order(varImp(RFfit$finalModel), decreasing=T)
library(caret)
RFfit$finalModel # look at that confusion matrix....
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
RFfit <- train(y ~ ., data = vowel.train, method = "rf", prox = T)
RFfit$finalModel # look at that confusion matrix....
order(varImp(RFfit$finalModel), decreasing=T)
pwd
pwd()
getwd()
train <- read.csv("^/Proj_Data/pml-training.csv")
train <- read.csv("~/Proj_Data/pml-training.csv")
train <- read.csv("../Proj_Data/pml-training.csv")
test <- read.csv("../Proj_Data/pml-testing.csv")
View(train)
train <- read.csv("../Proj_Data/pml-training.csv")
test <- read.csv("../Proj_Data/pml-testing.csv")
View(train)
train <- read.csv("../Proj_Data/pml-training.csv")
test <- read.csv("../Proj_Data/pml-testing.csv")
View(test)
names(train)
table(train$classe)
table(train$classe)
table(train$classe)
dim(train)
str(train)
Null_Counter <- apply(train, 2, function(x) length(which(x == "" | is.na(x)))/length(x))
Null_Name <- colnames(train)[Null_Counter >= 0.3]
Null_Name
Null_Name <- colnames(train)[Null_Counter >= 0.9]
Null_Name
names(train)
trainTest <- train[, !Null_Name]
trainRemove <- grepl("^X|timestamp|window", names(train))
trainRemove
names(train) %in% Null_Name
In_Check <- names(train) %in% Null_Name
trainTest <- train[, !In_Check]
names(trainTest)
Null_Name
train <- train[, c(-1:-6)]
View(train)
dim(train)
train <- read.csv("../Proj_Data/pml-training.csv")
test <- read.csv("../Proj_Data/pml-testing.csv")
Null_Counter <- apply(train, 2, function(x) length(which(x == "" | is.na(x)))/length(x))
Null_Name <- colnames(train)[Null_Counter >= 0.9] # drop the columns with more than 90% null. Nulls appear as "" or NA
In_Check <- names(train) %in% Null_Name
train <- train[, !In_Check]
train <- train[, c(-1:-6)]
dim(train)
View(train)
set.seed(12345)
inTrain <- createDataPartition(train$classe, p=0.70, list=F)
trainData <- trainCleaned[inTrain, ]
trainData <- train[inTrain, ]
testData <- train[-inTrain, ]
inTrain <- createDataPartition(train$classe, p=0.70, list=F)
library(caret)
set.seed(12345)
inTrain <- createDataPartition(train$classe, p=0.70, list=F)
trainData <- train[inTrain, ]
testData <- train[-inTrain, ]
controlRf <- trainControl(method="cv", 5)
fit_rf <- train(classe ~ ., data=train, method="rf", trControl=controlRf, ntree=500)
fit_rf <- train(classe ~ ., data=train, method="rf", trControl=controlRf, ntree=250)
install.packages("randomForest")
fit_rf <- train(classe ~ ., data=train, method="rf", trControl=controlRf, ntree=250)
fit_rf
rf_hat <- predict(fit_rf, testData)
confusionMatrix(testData$classe, rf_hat)
fit_rf <- train(classe ~ ., data=trainData, method="rf", trControl=controlRf, ntree=250)
fit_rf
rf_hat <- predict(fit_rf, testData)
confusionMatrix(testData$classe, rf_hat)
test <- test[[, !In_Check]]
test <- read.csv("../Proj_Data/pml-testing.csv")
In_Check
Null_Name
dim(test)
length(In_Check)
test <- test[, !In_Check]
View(test)
test <- test[, c(-1:-6)]; dim(test) # apply the same preparation process on test set.
dim(train)
prediction <- predict(rf_hat, test)
prediction <- predict(fit_rf, test)
prediction
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(prediction)
install.packages('neuralnet')
library("neuralnet")
install.packages("nnet")
library(nnet)
nn_fit <- nnet(classe ~ ., trainData, size=20,maxit=10000,decay=.001, skip = T, entropy=T)
library(nnet)
table(train$classe); dim(train)
varImp(fit_rf)
importance(fit_rf)
fit_rf
accuracy <- postResample(rf_hat, testData$classe)
accuracy
accuracy[1]
1- accuracy[1]
as.numeric(accuracy[1])
1 - as.numeric(accuracy[1])
table(train$classe)
dim(train)
