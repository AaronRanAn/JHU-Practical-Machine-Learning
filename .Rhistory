library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(predictors)
adData
head(adData)
adData = data.frame(diagnosis,predictors)
adData
head(adData)
predictors
str(predictors)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
?predictors
hist(training$Superplasticizer)
table(training$Superplasticizer = 0)
table(training$Superplasticizer ==0)
ss <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(ss, method='pca', thresh=0.9,
outcome=training$diagnosis)
ss <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(ss, method='pca', thresh=0.8, outcome=training$diagnosis)
str(ss)
ss <- training[,grep('IL', x = names(training) )]
str(ss)
str(training)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ss <- training[,grep('^IL', x = names(training) )]
str(ss)
preProc <- preProcess(ss, method='pca', thresh=0.8, outcome=training$diagnosis)
preProc$rotation # 9
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
install.packages(rattle)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
str(segmentationOriginal)
?segmentationOriginal
inTrain = createDataPartition(y=segmentationOriginal$Class,
p=0.7,list = F)
training = segmentationOriginal[inTrain, ]
testing = segmentationOriginal[-inTrain, ]
dim(training); dim(testing)
seed(125)
seed
set.seed(125)
treefit <- train(Class ~ ., methods = "rpart", data = training)
treefit <- train(Class ~ ., methods = "rpart", data = training)
install.packages(e1071)
install.packages("e1071")
treefit <- train(Class ~ ., methods = "rpart", data = training)
install.packages("rattle")
treefit <- train(Class ~ ., methods = "rpart", data = training)
View(segmentationOriginal)
inTrain = data$Case == "Train"
inTrain <- data$Case == "Train"
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- segmentationOriginal$Case == "Train"
training = segmentationOriginal[inTrain, ]
testing = segmentationOriginal[-inTrain, ]
dim(training); dim(testing)
set.seed(125)
treefit <- train(Class ~ ., methods = "rpart", data = training)
print(treefit$finalModel)
library(rattle)
fancyRpartPlot(treefit$finalModel)
library(rattle)
plot(treefit$finalModel, uniform = T, main = "Tree Classification")
text(treefit$finalModel, use.n = T, all = T, cex = .8)
View(training)
set.seed(125)
warnings()
